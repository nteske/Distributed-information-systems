api:

  common:
    version: 1.0.0
    title: Sample API
    description: Description of the API...
    termsOfServiceUrl: MINE TERMS OF SERVICE URL
    license: License
    licenseUrl: MY LICENSE URL

    contact:
      name: Contact
      url: My
      email: me@mail.com

  hotel-composite:

    get-composite-hotel:
      description: Returns a composite view of the specified hotel id
      notes: |
        # Normal response
        If the requested hotel id is found the method will return information regarding:
        1. Hotel information
        1. Location
        1. Reviews
        1. Rooms
        1. Service Addresses
        (technical information regarding the addresses of the microservices that created the response)
        # Expected partial and error responses
        1. If no hotel information is found, a <b>404 - Not Found</b> error will be returned
        1. If no location, rooms or reviews are found for a hotel, a partial response will be returned
    create-composite-hotel:
      description: Creates a composite hotel
      notes: |
        # Normal response
        The composite hotel information posted to the API will be split up and stored as separate hotel-info, location, room and review entities.
        # Expected error responses
        1. If a hotel with the same hotelId as specified in the posted information already exists,
           an <b>422 - Unprocessable Entity</b> error with a "duplicate key" error message will be returned
    delete-composite-hotel:
      description: Deletes a hotel composite
      notes: |
        # Normal response
        Entities for hotel information, location, rooms and reviews related to the specificed hotelId will be deleted.
        The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.
        This means that a delete request of a non existing hotel will return <b>200 Ok</b>.
server.port: 7000
server.error.include-message: always

spring.application.name: hotel-composite

app.eureka-server: localhost

eureka:
  client:
    serviceUrl:
      defaultZone: http://${app.eureka-server}:8761/eureka/
    initialInstanceInfoReplicationIntervalSeconds: 5
    registryFetchIntervalSeconds: 5
  instance:
    leaseRenewalIntervalInSeconds: 5
    leaseExpirationDurationInSeconds: 5

ribbon.ServerListRefreshInterval: 5000

ribbon.NFLoadBalancerPingInterval: 5

spring.cloud.stream:
  defaultBinder: rabbit
  default.contentType: application/json
  bindings:
    output-hotels:
      destination: hotels
      producer:
        required-groups: auditGroup
    output-location:
      destination: location
      producer:
        required-groups: auditGroup
    output-reviews:
      destination: reviews
      producer:
        required-groups: auditGroup
    output-rooms:
      destination: rooms
      producer:
        required-groups: auditGroup

spring.cloud.stream.kafka.binder:
  brokers: 127.0.0.1
  defaultBrokerPort: 9092

spring.rabbitmq:
  host: 127.0.0.1
  port: 5672
  username: guest
  password: guest
logging:
  level:
    root: INFO
    com.example: DEBUG

management.endpoint.health.show-details: "ALWAYS"
management.endpoints.web.exposure.include: "*"
---
spring.profiles: docker

server.port: 8080

eureka.client.serviceUrl.defaultZone: http://eureka:8761/eureka/

spring.rabbitmq.host: rabbitmq

spring.cloud.stream.kafka.binder.brokers: kafka

app.eureka-server: eureka